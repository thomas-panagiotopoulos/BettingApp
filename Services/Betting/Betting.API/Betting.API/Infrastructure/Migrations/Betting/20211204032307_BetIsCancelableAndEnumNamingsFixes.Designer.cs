// <auto-generated />
using System;
using BettingApp.Services.Betting.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BettingApp.Services.Betting.API.Infrastructure.Migrations.Betting
{
    [DbContext(typeof(BettingContext))]
    [Migration("20211204032307_BetIsCancelableAndEnumNamingsFixes")]
    partial class BetIsCancelableAndEnumNamingsFixes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Bet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTimeCreated");

                    b.Property<string>("GamblerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GamblerId");

                    b.Property<bool>("IsCancelable")
                        .HasColumnType("bit")
                        .HasColumnName("IsCancelable");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("IsPaid");

                    b.Property<decimal>("PotentialProfit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PotentialProfit");

                    b.Property<decimal>("PotentialWinnings")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PotentialWinnings");

                    b.Property<int>("ResultId")
                        .HasColumnType("int")
                        .HasColumnName("BetResultId");

                    b.Property<string>("ResultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BetResultName");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusName");

                    b.Property<decimal>("TotalOdd")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalOdd");

                    b.Property<decimal>("WageredAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("WageredAmount");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("StatusId");

                    b.ToTable("bets", "betting");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.BettingResult", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("bettingResult", "betting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Won"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lost"
                        });
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AwayClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AwayClubName");

                    b.Property<int>("AwayClubScore")
                        .HasColumnType("int")
                        .HasColumnName("AwayClubScore");

                    b.Property<string>("CurrentMinute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentMinute");

                    b.Property<int>("GoalsResultId")
                        .HasColumnType("int")
                        .HasColumnName("GoalsResultId");

                    b.Property<string>("GoalsResultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GoalsResultName");

                    b.Property<string>("HomeClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HomeClubName");

                    b.Property<int>("HomeClubScore")
                        .HasColumnType("int")
                        .HasColumnName("HomeClubScore");

                    b.Property<DateTime>("KickoffDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("KincoffDateTime");

                    b.Property<string>("RelatedMatchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RelatedMatchId");

                    b.Property<string>("SelectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SelectionId");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusName");

                    b.Property<int>("WinnerResultId")
                        .HasColumnType("int")
                        .HasColumnName("WinnerResultId");

                    b.Property<string>("WinnerResultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WinnerResultName");

                    b.HasKey("Id");

                    b.HasIndex("GoalsResultId");

                    b.HasIndex("SelectionId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("matches", "betting");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.MatchResult", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("matchResult", "betting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AliasName = "1",
                            Name = "WinnerHomeClub",
                            TypeId = 1,
                            TypeName = "Winner"
                        },
                        new
                        {
                            Id = 2,
                            AliasName = "X",
                            Name = "WinnerDraw",
                            TypeId = 1,
                            TypeName = "Winner"
                        },
                        new
                        {
                            Id = 3,
                            AliasName = "2",
                            Name = "WinnerAwayClub",
                            TypeId = 1,
                            TypeName = "Winner"
                        },
                        new
                        {
                            Id = 4,
                            AliasName = "Under",
                            Name = "GoalsUnder",
                            TypeId = 2,
                            TypeName = "Goals"
                        },
                        new
                        {
                            Id = 5,
                            AliasName = "Over",
                            Name = "GoalsOver",
                            TypeId = 2,
                            TypeName = "Goals"
                        });
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Selection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BetId");

                    b.Property<int>("GamblerMatchResultId")
                        .HasColumnType("int")
                        .HasColumnName("GamblerMatchResultId");

                    b.Property<string>("GamblerMatchResultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GamblerMatchResultName");

                    b.Property<decimal>("Odd")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Odd");

                    b.Property<int>("ResultId")
                        .HasColumnType("int")
                        .HasColumnName("ResultId");

                    b.Property<string>("ResultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResultName");

                    b.Property<int>("SelectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SelectionTypeId");

                    b.Property<string>("SelectionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectionTypeName");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusName");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.HasIndex("GamblerMatchResultId");

                    b.HasIndex("ResultId");

                    b.HasIndex("StatusId");

                    b.ToTable("selections", "betting");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("status", "betting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ongoing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("requests", "betting");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Bet", b =>
                {
                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.BettingResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Match", b =>
                {
                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.MatchResult", "Result")
                        .WithMany()
                        .HasForeignKey("GoalsResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Selection", null)
                        .WithOne("Match")
                        .HasForeignKey("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Match", "SelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Selection", b =>
                {
                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Bet", null)
                        .WithMany("Selections")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.MatchResult", "GamblerMatchResult")
                        .WithMany()
                        .HasForeignKey("GamblerMatchResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.BettingResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GamblerMatchResult");

                    b.Navigation("Result");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Bet", b =>
                {
                    b.Navigation("Selections");
                });

            modelBuilder.Entity("BettingApp.Services.Betting.Domain.AggregatesModel.BetAggregate.Selection", b =>
                {
                    b.Navigation("Match");
                });
#pragma warning restore 612, 618
        }
    }
}
