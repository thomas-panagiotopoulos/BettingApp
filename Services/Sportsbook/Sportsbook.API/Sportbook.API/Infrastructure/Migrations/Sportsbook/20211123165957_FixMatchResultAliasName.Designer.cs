// <auto-generated />
using System;
using BettingApp.Services.Sportbook.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BettingApp.Services.Sportbook.API.Infrastructure.Migrations.Sportsbook
{
    [DbContext(typeof(SportsbookContext))]
    [Migration("20211123165957_FixMatchResultAliasName")]
    partial class FixMatchResultAliasName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.League", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("league");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GreekSuperLeague"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EnglishPremierLeague"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SpanishLaLiga"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ItalianSerieA"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GermanBundesliga"
                        },
                        new
                        {
                            Id = 6,
                            Name = "NoDomesticLeague"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ChampionsLeague"
                        },
                        new
                        {
                            Id = 8,
                            Name = "EuropaLeague"
                        },
                        new
                        {
                            Id = 9,
                            Name = "EuropaConferenceLeague"
                        },
                        new
                        {
                            Id = 10,
                            Name = "NoContinentalLeague"
                        });
                });

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AwayClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AwayClubName");

                    b.Property<int>("AwayClubScore")
                        .HasColumnType("int")
                        .HasColumnName("AwayClubScore");

                    b.Property<string>("CurrentMinute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentMinute");

                    b.Property<string>("HomeClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HomeClubName");

                    b.Property<int>("HomeClubScore")
                        .HasColumnType("int")
                        .HasColumnName("HomeClubScore");

                    b.Property<bool>("IsBetable")
                        .HasColumnType("bit")
                        .HasColumnName("IsBetable");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit")
                        .HasColumnName("IsCanceled");

                    b.Property<DateTime>("KickoffDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("KickoffDateTime");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int")
                        .HasColumnName("LeagueId");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LeagueName");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.MatchResult", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("matchResult");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AliasName = "1",
                            Name = "winnerhomeclub"
                        },
                        new
                        {
                            Id = 2,
                            AliasName = "X",
                            Name = "winnerdraw"
                        },
                        new
                        {
                            Id = 3,
                            AliasName = "2",
                            Name = "winnerawayclub"
                        },
                        new
                        {
                            Id = 4,
                            AliasName = "Under",
                            Name = "goalsunder"
                        },
                        new
                        {
                            Id = 5,
                            AliasName = "Over",
                            Name = "goalsover"
                        });
                });

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.PossiblePick", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBetable")
                        .HasColumnType("bit")
                        .HasColumnName("IsBetable");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit")
                        .HasColumnName("IsCanceled");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IsDisabled");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MatchId");

                    b.Property<int>("MatchResultId")
                        .HasColumnType("int")
                        .HasColumnName("MatchResultId");

                    b.Property<string>("MatchResultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MatchResultName");

                    b.Property<decimal>("Odd")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Odd");

                    b.Property<decimal>("RequiredValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RequiredValue");

                    b.Property<int>("RequirementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RequirementTypeId");

                    b.Property<string>("RequirementTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RequirementTypeName");

                    b.HasKey("Id");

                    b.HasAlternateKey("MatchId", "MatchResultId");

                    b.HasIndex("MatchResultId");

                    b.HasIndex("RequirementTypeId");

                    b.ToTable("possiblePicks");
                });

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.RequirementType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("requirementType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "norequirement"
                        },
                        new
                        {
                            Id = 2,
                            Name = "minimumselections"
                        },
                        new
                        {
                            Id = 3,
                            Name = "minimumwageredamount"
                        },
                        new
                        {
                            Id = 4,
                            Name = "maximumselections"
                        },
                        new
                        {
                            Id = 5,
                            Name = "maximumwageredamount"
                        });
                });

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.Match", b =>
                {
                    b.HasOne("BettingApp.Services.Sportbook.API.Model.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.PossiblePick", b =>
                {
                    b.HasOne("BettingApp.Services.Sportbook.API.Model.Match", null)
                        .WithMany("PossiblePicks")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Sportbook.API.Model.MatchResult", "MatchResult")
                        .WithMany()
                        .HasForeignKey("MatchResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BettingApp.Services.Sportbook.API.Model.RequirementType", "RequirementType")
                        .WithMany()
                        .HasForeignKey("RequirementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MatchResult");

                    b.Navigation("RequirementType");
                });

            modelBuilder.Entity("BettingApp.Services.Sportbook.API.Model.Match", b =>
                {
                    b.Navigation("PossiblePicks");
                });
#pragma warning restore 612, 618
        }
    }
}
