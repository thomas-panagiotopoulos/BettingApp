#pragma checksum "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_SportsbookSignalrHubScript.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cb2462963f330e21bae0e2df263ea089a4264f74"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BettingApp.WebApps.WebRazorPages.Pages.Shared.Pages_Shared__SportsbookSignalrHubScript), @"mvc.1.0.view", @"/Pages/Shared/_SportsbookSignalrHubScript.cshtml")]
namespace BettingApp.WebApps.WebRazorPages.Pages.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 3 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\_ViewImports.cshtml"
using BettingApp.WebApps.WebRazorPages.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_SportsbookSignalrHubScript.cshtml"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cb2462963f330e21bae0e2df263ea089a4264f74", @"/Pages/Shared/_SportsbookSignalrHubScript.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d09d2985af4fd647a03c83a8b7bd76aae2be1195", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Shared__SportsbookSignalrHubScript : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 7 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_SportsbookSignalrHubScript.cshtml"
   
    string sportsbookSignalrHubUrl;

    if (settings.Value.IsContainerEnv == true)
    {
        // If we manage to fix the routing issue when attempting to connect to SignalrHubs through the Ocelot ApiGw,
        // then we will switch to using the Web.Bff.Gambling Url. Until then, we connect to SignalrHubs directly
        // from their external Urls.
        //sportsbookSignalrHubUrl = settings.Value.GamblingUrlExternal;
        sportsbookSignalrHubUrl = settings.Value.SportsbookSignalrHubUrl;

    }
    else
    {
        sportsbookSignalrHubUrl = settings.Value.SportsbookSignalrHubUrl;
    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<script type=""text/javascript"">

    stablishSportsbookHubConnection((sportsbookConn) => registerSportsbookHubConnection(sportsbookConn));

    function stablishSportsbookHubConnection(cb) {
        let connection = new signalR.HubConnectionBuilder()
            .withUrl('");
#nullable restore
#line 30 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_SportsbookSignalrHubScript.cshtml"
                 Write(sportsbookSignalrHubUrl);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/hub/sportsbookhub')
            .withAutomaticReconnect()
            .build();

        connection.start().then(function () {
            console.log('Connected to Sportsbook Signalr Hub');
            cb(connection);
        });
    }

    function registerSportsbookHubConnection(connection) {
        connection.on(""MatchCanceled"", (message) => {
            document.getElementById(""Match#"" + message.matchId + ""#CurrentMinute"").innerHTML = ""Canceled"";
            document.getElementById(""Match#"" + message.matchId + ""#Ticker"").hidden = true;
            document.getElementById(""Match#"" + message.matchId + ""#HomeClubScore"").innerHTML = ""-"";
            document.getElementById(""Match#"" + message.matchId + ""#AwayClubScore"").innerHTML = ""-"";

            var matchOdds = document.getElementsByClassName(""Match#"" + message.matchId + ""#Odd"");
            var matchInitialOdds = document.getElementsByClassName(""Match#"" + message.matchId + ""#InitialOdd"");

            for (var i = 0; i < matchOdds.length; i+");
            WriteLiteral(@"+)
            {
                matchOdds[i].hidden = true;
                matchInitialOdds[i].hidden = false;
            }
        });

        connection.on(""MatchCurrentMinuteChanged"", (message) => {
            var currentMinute = document.getElementById(""Match#"" + message.matchId + ""#CurrentMinute"").innerHTML;
            var isCanceled = currentMinute.localeCompare(""Canceled"");
            var isCompleted = currentMinute.localeCompare(""FT"");
            if (isCanceled != 0 && isCompleted != 0)
            {
                document.getElementById(""Match#"" + message.matchId + ""#CurrentMinute"").innerHTML = message.currentMinute;
                if (message.currentMinute.localeCompare(""1"") == 0)
                {
                    document.getElementById(""Match#"" + message.matchId + ""#HomeClubScore"").innerHTML = 0;
                    document.getElementById(""Match#"" + message.matchId + ""#AwayClubScore"").innerHTML = 0;
                    document.getElementById(""Match#"" + message.matchId + ""#Ticke");
            WriteLiteral(@"r"").hidden = false;
                }
                if (message.currentMinute.localeCompare(""HT"") == 0)
                {
                    document.getElementById(""Match#"" + message.matchId + ""#Ticker"").hidden = true;
                }
                if (message.currentMinute.localeCompare(""46"") == 0)
                {
                    document.getElementById(""Match#"" + message.matchId + ""#Ticker"").hidden = false;
                }
                if (message.currentMinute.localeCompare(""FT"") == 0)
                {
                    document.getElementById(""Match#"" + message.matchId + ""#Ticker"").hidden = true;

                    var matchOdds = document.getElementsByClassName(""Match#"" + message.matchId + ""#Odd"");
                    var matchInitialOdds = document.getElementsByClassName(""Match#"" + message.matchId + ""#InitialOdd"");

                    for (var i = 0; i < matchOdds.length; i++) {
                        matchOdds[i].hidden = true;
                        matchInitialOdds[i].h");
            WriteLiteral(@"idden = false;
                    }
                }
            }
            
        });

        connection.on(""MatchScoresChanged"", (message) => {
            var currentMinute = document.getElementById(""Match#"" + message.matchId + ""#CurrentMinute"").innerHTML;
            var isCanceled = currentMinute.localeCompare(""Canceled"");
            var isCompleted = currentMinute.localeCompare(""FT"");
            if (isCanceled != 0 && isCompleted != 0)
            {
                document.getElementById(""Match#"" + message.matchId + ""#HomeClubScore"").innerHTML = message.homeClubScore;
                document.getElementById(""Match#"" + message.matchId + ""#AwayClubScore"").innerHTML = message.awayClubScore;
            }
        });

        connection.on(""PossiblePickOddOrBetableStatusChanged"", (message) => {
            var currentMinute = document.getElementById(""Match#"" + message.matchId + ""#CurrentMinute"").innerHTML;
            var isCanceled = currentMinute.localeCompare(""Canceled"");
            var isC");
            WriteLiteral(@"ompleted = currentMinute.localeCompare(""FT"");
            if (isCanceled != 0 && isCompleted != 0)
            {
                document.getElementById(""Match#"" + message.matchId + ""#Result#"" + message.matchResultAliasName + ""#Odd"").innerHTML = message.odd;
                if (message.isBetable) {
                    document.getElementById(""Match#"" + message.matchId + ""#Result#"" + message.matchResultAliasName + ""#Link"").style.pointerEvents = ""auto"";
                    document.getElementById(""Match#"" + message.matchId + ""#Result#"" + message.matchResultAliasName + ""#Link"").onclick = function () { this.parentNode.submit();}
                }
                else
                {
                    document.getElementById(""Match#"" + message.matchId + ""#Result#"" + message.matchResultAliasName + ""#Link"").style.pointerEvents = ""none"";
                    document.getElementById(""Match#"" + message.matchId + ""#Result#"" + message.matchResultAliasName + ""#Link"").removeAttribute(""onclick"");
                }
  ");
            WriteLiteral("          }\n            \n        });\n    }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IOptions<AppSettings> settings { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
