#pragma checksum "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BettingSignalrHubScript.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "99c9782285282d679ff82dd60094a1d4928d6eec"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BettingApp.WebApps.WebRazorPages.Pages.Shared.Pages_Shared__BettingSignalrHubScript), @"mvc.1.0.view", @"/Pages/Shared/_BettingSignalrHubScript.cshtml")]
namespace BettingApp.WebApps.WebRazorPages.Pages.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 3 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\_ViewImports.cshtml"
using BettingApp.WebApps.WebRazorPages.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BettingSignalrHubScript.cshtml"
using Microsoft.AspNetCore.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BettingSignalrHubScript.cshtml"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"99c9782285282d679ff82dd60094a1d4928d6eec", @"/Pages/Shared/_BettingSignalrHubScript.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d09d2985af4fd647a03c83a8b7bd76aae2be1195", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Shared__BettingSignalrHubScript : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BettingSignalrHubScript.cshtml"
  
    string bettingSignalrHubUrl;

    if (settings.Value.IsContainerEnv == true)
    {
        // If we manage to fix the routing issue when attempting to connect to SignalrHubs through the Ocelot ApiGw,
        // then we will switch to using the Web.Bff.Gambling Url. Until then, we connect to SignalrHubs directly
        // from their external Urls.
        //bettingSignalrHubUrl = settings.Value.GamblingUrlExternal;
        bettingSignalrHubUrl = settings.Value.BettingSignalrHubUrl;
    }
    else
    {
        bettingSignalrHubUrl = settings.Value.BettingSignalrHubUrl;
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("<script type=\"text/javascript\">\r\n\r\n    if (\'");
#nullable restore
#line 22 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BettingSignalrHubScript.cshtml"
    Write(User.Identity.IsAuthenticated);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' === 'True') {

        stablishBettingHubConnection((bettingConn) => registerBettingHubHandlers(bettingConn));
    }

    function stablishBettingHubConnection(cb) {
        let connection = new signalR.HubConnectionBuilder()
            .withUrl('");
#nullable restore
#line 29 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BettingSignalrHubScript.cshtml"
                 Write(bettingSignalrHubUrl);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/hub/bettinghub', {
                    accessTokenFactory: () => {
                        return ""Authorization"", getToken();
                    }
            })
            .withAutomaticReconnect()
            .build();

            connection.start().then(function () {
                console.log('User Connected to Betting Signalr Hub');
                cb(connection);
            });
    }

    function getToken() {
            return '");
#nullable restore
#line 44 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BettingSignalrHubScript.cshtml"
               Write(Context.GetTokenAsync("access_token").Result);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
    }

    function registerBettingHubHandlers(connection) {
        connection.on(""SelectionCanceled"", (message) => {
            document.getElementById(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML = ""Canceled"";
            document.getElementById(""Selection#"" + message.selectionId + ""#HomeClubScore"").innerHTML = ""-"";
            document.getElementById(""Selection#"" + message.selectionId + ""#AwayClubScore"").innerHTML = ""-"";
            document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = true;
            document.getElementById(""Selection#"" + message.selectionId + ""#Result"").hidden = true;
            document.getElementById(""Selection#"" + message.selectionId + ""#DummyResult"").hidden = false;
            document.getElementById(""Selection#"" + message.selectionId + ""#Odd"").style.color = ""lightgrey"";
        });

        connection.on(""SelectionCurrentMinuteChanged"", (message) => {
            var currentMinute = document.getElementById(""Selec");
            WriteLiteral(@"tion#"" + message.selectionId + ""#CurrentMinute"").innerHTML;
            var compare = currentMinute.localeCompare(""Canceled"");
            if (compare != 0) {
                document.getElementById(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML = message.currentMinute;
                if (message.currentMinute.localeCompare(""1"") == 0) {
                    document.getElementById(""Selection#"" + message.selectionId + ""#HomeClubScore"").innerHTML = 0;
                    document.getElementById(""Selection#"" + message.selectionId + ""#AwayClubScore"").innerHTML = 0;
                    document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = false;
                    document.getElementById(""Selection#"" + message.selectionId + ""#Result"").hidden = false;
                    document.getElementById(""Selection#"" + message.selectionId + ""#DummyResult"").hidden = true;
                }
                if (message.currentMinute.localeCompare(""HT"") == 0 || message.cur");
            WriteLiteral(@"rentMinute.localeCompare(""FT"") == 0) {
                    document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = true;
                }
                if (message.currentMinute.localeCompare(""46"") == 0) {
                    document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = false;
                }
            }
        });

        connection.on(""SelectionScoresChanged"", (message) => {
            var currentMinute = document.getElementById(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML;
            var compare = currentMinute.localeCompare(""Canceled"");
            if (compare != 0) {
                document.getElementById(""Selection#"" + message.selectionId + ""#HomeClubScore"").innerHTML = message.homeClubScore;
                document.getElementById(""Selection#"" + message.selectionId + ""#AwayClubScore"").innerHTML = message.awayClubScore;
            }
        });

        connection.on(""SelectionResultChanged"", ");
            WriteLiteral(@"(message) => {
            document.getElementById(""Selection#"" + message.selectionId + ""#Result"").innerHTML = message.resultName;
        });

        connection.on(""SelectionStatusChanged"", (message) => {
            // not implemented, we use the SelectionCanceled and SelectionCurrentMinuteChanged events to visualize
            // ""status"" changes of the Selection on the client
        });

        connection.on(""BetStatusChanged"", (message) => {
            var betStatusElement = document.getElementById(""Bet#"" + message.betId + ""#Status"");
            if (betStatusElement.tagName == 'DIV')
            {
                betStatusElement.innerHTML = message.statusName;
            }
            else if (betStatusElement.tagName == 'INPUT')
            {
                betStatusElement.value = message.statusName;
            }

            if (message.statusName.localeCompare(""Completed"") == 0)
            {
                document.getElementById(""Bet#"" + message.betId + ""#DummyResul");
            WriteLiteral(@"t"").hidden = true;
                document.getElementById(""Bet#"" + message.betId + ""#Result"").hidden = false;
            }
            if (message.statusName.localeCompare(""Canceled"") == 0) {
                document.getElementById(""Bet#"" + message.betId + ""#TotalOdd"").hidden = true;
                document.getElementById(""Bet#"" + message.betId + ""#InitialTotalOdd"").hidden = false;
                document.getElementById(""Bet#"" + message.betId + ""#PotentialWinnings"").hidden = true;
                document.getElementById(""Bet#"" + message.betId + ""#InitialPotentialWinnings"").hidden = false;
                document.getElementById(""Bet#"" + message.betId + ""#PotentialProfit"").hidden = true;
                document.getElementById(""Bet#"" + message.betId + ""#InitialPotentialProfit"").hidden = false;
            }
        });

        connection.on(""BetResultChanged"", (message) => {
            var betResultElement = document.getElementById(""Bet#"" + message.betId + ""#Result"");
            if (betRe");
            WriteLiteral(@"sultElement.tagName == 'DIV') {
                betResultElement.innerHTML = message.resultName;
            }
            else if (betResultElement.tagName == 'INPUT') {
                betResultElement.value = message.resultName;
            }
        });

        connection.on(""BetCancelableStatusChanged"", (message) => {
            if (message.isCancelable)
            {
                document.getElementById(""Bet#"" + message.betId + ""#NotCancelableLabel"").hidden = true;
                document.getElementById(""Bet#"" + message.betId + ""#CancelButton"").disabled = false;
                document.getElementById(""Bet#"" + message.betId + ""#CancelButton"").hidden = false;
            }
            else
            {
                document.getElementById(""Bet#"" + message.betId + ""#CancelButton"").disabled = true;
                document.getElementById(""Bet#"" + message.betId + ""#CancelButton"").hidden = true;
                document.getElementById(""Bet#"" + message.betId + ""#NotCancelableLabel");
            WriteLiteral(@""").hidden = false;
            }
        });

        connection.on(""BetDetailsChanged"", (message) => {
            var betTotalOddElement = document.getElementById(""Bet#"" + message.betId + ""#TotalOdd"");
            if (betTotalOddElement.tagName == 'DIV')
            {
                betTotalOddElement.innerHTML = message.totalOdd;
            }
            else if (betTotalOddElement.tagName == 'INPUT')
            {
                betTotalOddElement.value = message.totalOdd;
            }

            var betPotentialWinningsElement = document.getElementById(""Bet#"" + message.betId + ""#PotentialWinnings"");
            if (betPotentialWinningsElement.tagName == 'DIV') {
                betPotentialWinningsElement.innerHTML = message.potentialWinnings;
            }
            else if (betPotentialWinningsElement.tagName == 'INPUT') {
                betPotentialWinningsElement.value = message.potentialWinnings + "" €"";
            }

            var betPotentialProfitElement = docume");
            WriteLiteral(@"nt.getElementById(""Bet#"" + message.betId + ""#PotentialProfit"");
            if (betPotentialProfitElement.tagName == 'DIV') {
                betPotentialProfitElement.innerHTML = message.potentialProfit;
            }
            else if (betPotentialProfitElement.tagName == 'INPUT') {
                betPotentialProfitElement.value = message.potentialProfit + "" €"";
            }
        });
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IOptions<AppSettings> settings { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
