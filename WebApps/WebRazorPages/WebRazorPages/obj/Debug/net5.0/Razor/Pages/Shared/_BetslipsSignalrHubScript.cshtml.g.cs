#pragma checksum "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BetslipsSignalrHubScript.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "30625fedd26f18e7a95cc5d3590d95cac2941ae3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BettingApp.WebApps.WebRazorPages.Pages.Shared.Pages_Shared__BetslipsSignalrHubScript), @"mvc.1.0.view", @"/Pages/Shared/_BetslipsSignalrHubScript.cshtml")]
namespace BettingApp.WebApps.WebRazorPages.Pages.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 3 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\_ViewImports.cshtml"
using BettingApp.WebApps.WebRazorPages.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BetslipsSignalrHubScript.cshtml"
using Microsoft.AspNetCore.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BetslipsSignalrHubScript.cshtml"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"30625fedd26f18e7a95cc5d3590d95cac2941ae3", @"/Pages/Shared/_BetslipsSignalrHubScript.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d09d2985af4fd647a03c83a8b7bd76aae2be1195", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Shared__BetslipsSignalrHubScript : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 7 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BetslipsSignalrHubScript.cshtml"
  
    string betslipsSignalrHubUrl;

    if (settings.Value.IsContainerEnv == true)
    {
        // If we manage to fix the routing issue when attempting to connect to SignalrHubs through the Ocelot ApiGw,
        // then we will switch to using the Web.Bff.Gambling Url. Until then, we connect to SignalrHubs directly
        // from their external Urls.
        //betslipsSignalrHubUrl = settings.Value.GamblingUrlExternal;
        betslipsSignalrHubUrl = settings.Value.BetslipsSignalrHubUrl;

    }
    else
    {
        betslipsSignalrHubUrl = settings.Value.BetslipsSignalrHubUrl;
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("<script type=\"text/javascript\">\r\n    if (\'");
#nullable restore
#line 25 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BetslipsSignalrHubScript.cshtml"
    Write(User.Identity.IsAuthenticated);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' === 'True') {

        stablishBetslipsHubConnection((betslipsConn) => registerBetslipsHubHandlers(betslipsConn));
    }

    function stablishBetslipsHubConnection(cb) {
        let connection = new signalR.HubConnectionBuilder()
            .withUrl('");
#nullable restore
#line 32 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BetslipsSignalrHubScript.cshtml"
                 Write(betslipsSignalrHubUrl);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/hub/betslipshub', {
                    accessTokenFactory: () => {
                        return ""Authorization"", getToken();
                    }
            })
            .withAutomaticReconnect()
            .build();

            connection.start().then(function () {
                console.log('User Connected to Betslips Signalr Hub');
                cb(connection);
            });
    }

    function getToken() {
            return '");
#nullable restore
#line 47 "C:\Users\Thomas\Dropbox\CEID\Διπλωματική\BettingApp\WebApps\WebRazorPages\WebRazorPages\Pages\Shared\_BetslipsSignalrHubScript.cshtml"
               Write(Context.GetTokenAsync("access_token").Result);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
    }

    function registerBetslipsHubHandlers(connection) {
        connection.on(""SelectionCanceled"", (message) => {
            document.getElementById(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML = ""Canceled"";
            document.getElementById(""Selection#"" + message.selectionId + ""#HomeClubScore"").innerHTML = ""-"";
            document.getElementById(""Selection#"" + message.selectionId + ""#AwayClubScore"").innerHTML = ""-"";
            document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = true;
            document.getElementById(""Selection#"" + message.selectionId + ""#Odd"").hidden = true;
            document.getElementById(""Selection#"" + message.selectionId + ""#InitialOdd"").hidden = false;
            document.getElementById(""Selection#"" + message.selectionId + ""#BetableStatus"").innerHTML = ""Not Betable"";
        });

        connection.on(""SelectionCurrentMinuteChanged"", (message) => {
            var currentMinute = document.getElementById");
            WriteLiteral(@"(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML;
            var isCanceled = currentMinute.localeCompare(""Canceled"");
            var isCompleted = currentMinute.localeCompare(""FT"");
            if (isCanceled != 0 && isCompleted != 0)
            {
                document.getElementById(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML = message.currentMinute;
                if (message.currentMinute.localeCompare(""1"") == 0) {
                    document.getElementById(""Selection#"" + message.selectionId + ""#HomeClubScore"").innerHTML = 0;
                    document.getElementById(""Selection#"" + message.selectionId + ""#AwayClubScore"").innerHTML = 0;
                    document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = false;
                }
                if (message.currentMinute.localeCompare(""HT"") == 0) {
                    document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = true;
            ");
            WriteLiteral(@"    }
                if (message.currentMinute.localeCompare(""46"") == 0) {
                    document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = false;
                }
                if (message.currentMinute.localeCompare(""FT"") == 0)
                {
                    document.getElementById(""Selection#"" + message.selectionId + ""#Ticker"").hidden = true;
                    document.getElementById(""Selection#"" + message.selectionId + ""#Odd"").hidden = true;
                    document.getElementById(""Selection#"" + message.selectionId + ""#InitialOdd"").hidden = false;
                    document.getElementById(""Selection#"" + message.selectionId + ""#BetableStatus"").innerHTML = ""Not Betable"";
                }
            }
        });

        connection.on(""SelectionScoresChanged"", (message) => {
            var currentMinute = document.getElementById(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML;
            var isCanceled = currentMinut");
            WriteLiteral(@"e.localeCompare(""Canceled"");
            var isCompleted = currentMinute.localeCompare(""FT"");
            if (isCanceled != 0 && isCompleted != 0)
            {
                document.getElementById(""Selection#"" + message.selectionId + ""#HomeClubScore"").innerHTML = message.homeClubScore;
                document.getElementById(""Selection#"" + message.selectionId + ""#AwayClubScore"").innerHTML = message.awayClubScore;
            }
        });

        connection.on(""SelectionOddOrBetableStatusChanged"", (message) => {
            var currentMinute = document.getElementById(""Selection#"" + message.selectionId + ""#CurrentMinute"").innerHTML;
            var isCanceled = currentMinute.localeCompare(""Canceled"");
            var isCompleted = currentMinute.localeCompare(""FT"");
            if (isCanceled != 0 && isCompleted != 0)
            {
                document.getElementById(""Selection#"" + message.selectionId + ""#Odd"").innerHTML = message.odd;
                if (message.isBetable) {
         ");
            WriteLiteral(@"           document.getElementById(""Selection#"" + message.selectionId + ""#BetableStatus"").innerHTML = """";
                }
                else {
                    document.getElementById(""Selection#"" + message.selectionId + ""#BetableStatus"").innerHTML = ""Not Betable"";
                }
            }
        });

        connection.on(""BetslipBetableStatusChanged"", (message) => {
            if (message.isBetable) {
                document.getElementById(""betslip-betable-status"").innerHTML = """";
                document.getElementById(""betslip-checkout-button"").disabled = false;
            }
            else {
                document.getElementById(""betslip-betable-status"").innerHTML = ""Not Betable"";
                document.getElementById(""betslip-checkout-button"").disabled = true;
            }

        });

        connection.on(""BetslipDetailsChanged"", (message) => {
            document.getElementById(""betslip-total-odd"").value = message.totalOdd;
            document.getEleme");
            WriteLiteral(@"ntById(""betslip-potential-winnings"").value = message.potentialWinnings + "" €"";
            document.getElementById(""betslip-potential-profit"").value = message.potentialProfit + "" €"";
            document.getElementById(""betslip-wagered-amount"").placeholder = message.wageredAmount + "" €"";
        });
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IOptions<AppSettings> settings { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
